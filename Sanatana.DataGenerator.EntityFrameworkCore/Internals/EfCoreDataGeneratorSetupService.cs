using Microsoft.EntityFrameworkCore;
using Sanatana.DataGenerator.Entities;
using Sanatana.DataGenerator.EntityFrameworkCore.Modifiers;
using Sanatana.DataGenerator.EntityFrameworkCore.Validators;
using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Sanatana.EntityFrameworkCore.Batch.Repositories;

namespace Sanatana.DataGenerator.EntityFrameworkCore.Internals
{
    /// <summary>
    /// Base class to setup EntityFrameworkCore services for DataGenerator. Use derived classes
    /// </summary>
    public class EfCoreDataGeneratorSetupService
    {
        private Func<DbContext> _dbContextFactory;


        //init
        public EfCoreDataGeneratorSetupService(Func<DbContext> dbContextFactory)
        {
            _dbContextFactory = dbContextFactory;
        }


        //methods
        public virtual GeneratorSetup RegisterEntitiesFromEfDbContext(GeneratorSetup generatorSetup)
        {
            var modelService = new EfCoreModelService(_dbContextFactory);
            Type[] efTypes = modelService.GetConfiguredEntities();
            foreach (Type efType in efTypes)
            {
                if (!generatorSetup.ContainsEntity(efType))
                {
                    var entityDescription = new EntityDescription() { Type = efType };
                    generatorSetup = generatorSetup.RegisterEntity(entityDescription.ToGenericEntityDescription());
                }
            }

            return generatorSetup;
        }

        public virtual GeneratorSetup SetInsertToPersistentStorageBeforeUseForAutoGeneratedPropertiesFromEfDbContext(GeneratorSetup generatorSetup)
        {
            var modelService = new EfCoreModelService(_dbContextFactory);

            Type[] entityTypesRegistered = generatorSetup.GetRegistegedEntityTypes();
            foreach (Type entityType in entityTypesRegistered)
            {
                bool hasAutogeneratedProps = modelService.CheckHasAutoGeneratedProperties(entityType);
                if (hasAutogeneratedProps)
                {
                    generatorSetup = generatorSetup.EditEntity(entityType, config =>
                    {
                        config.InsertToPersistentStorageBeforeUse = true;
                        return config;
                    });
                }
            }
            return generatorSetup;
        }

        public virtual GeneratorSetup SetRequiredFromEfDbContext(GeneratorSetup generatorSetup)
        {
            var modelService = new EfCoreModelService(_dbContextFactory);

            Type[] entityTypesRegistered = generatorSetup.GetRegistegedNotParameterizedEntityTypes();
            foreach (Type entityType in entityTypesRegistered)
            {
                RequiredEntity[] requiredEntity = modelService.GetParentEntities(entityType)
                    .Distinct()
                    .Where(x => x != entityType) //skip self reference by entity
                    .Select(type => new RequiredEntity(type))
                    .ToArray();
                generatorSetup = generatorSetup.EditEntity(entityType, config =>
                {
                    config.Required.Clear();
                    config.Required.AddRange(requiredEntity);
                    return config;
                });
            }

            return generatorSetup;
        }

        public virtual GeneratorSetup AddDefaultEfSetPrimaryKeysModifier(GeneratorSetup generatorSetup, Type[] typesToExcludeValidation = null)
        {
            generatorSetup = generatorSetup
                .SetValidators(val => val
                    .EnsureAddValidator(new EfCoreSetPrimaryKeysModifierValidator(_dbContextFactory)
                        .ExcludeEntity(typesToExcludeValidation ?? new Type[0])
                    )
                )
                .SetDefaultSettings(def => def.AddModifier(new EfCoreSetPrimaryKeysModifier(_dbContextFactory)));

            return generatorSetup;
        }

        public virtual GeneratorSetup AddDefaultEfSetForeignKeysModifier(GeneratorSetup generatorSetup, Type[] typesToExcludeValidation = null)
        {
            generatorSetup = generatorSetup
                .SetValidators(val => val.EnsureAddValidator(new EfCoreSetForeignKeysModifierValidator(_dbContextFactory)
                    .ExcludeEntity(typesToExcludeValidation ?? new Type[0])
                ))
                .SetDefaultSettings(def => def.AddModifier(new EfCoreSetForeignKeysModifier(_dbContextFactory)));

            return generatorSetup;
        }

        public virtual GeneratorSetup AddDefaultEfPersistentStorage(GeneratorSetup generatorSetup, IRepositoryFactory repositoryFactory)
        {
            var storage = new EfCorePersistentStorage(repositoryFactory);
            generatorSetup = generatorSetup.SetDefaultSettings(def => def
               .AddPersistentStorage(storage)
               .SetRequestCapacityProvider(storage)
            );
            return generatorSetup;
        }
    }
}
