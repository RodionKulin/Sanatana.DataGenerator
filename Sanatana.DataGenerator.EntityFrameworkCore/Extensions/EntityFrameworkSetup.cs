using Microsoft.EntityFrameworkCore;
using Sanatana.DataGenerator.Entities;
using Sanatana.DataGenerator.EntityFrameworkCore;
using Sanatana.DataGenerator.EntityFrameworkCore.Internals;
using Sanatana.DataGenerator.EntityFrameworkCore.Modifiers;
using Sanatana.DataGenerator.EntityFrameworkCore.Validators;
using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;

namespace Sanatana.DataGenerator.EntityFrameworkCore.Extensions
{

    public class EntityFrameworkSetup
    {
        private Func<DbContext> _dbContextFactory;

        public GeneratorSetup GeneratorSetup { get; set; }


        //init
        public EntityFrameworkSetup(GeneratorSetup generatorSetup, Func<DbContext> dbContextFactory)
        {
            GeneratorSetup = generatorSetup;
            _dbContextFactory = dbContextFactory;
        }


        //methods
        /// <summary>
        /// Setup all settings related to EntityFramework including:
        /// 1. Register all entities to GeneratorSetup from EntityFramework DbContext model;
        /// 2. Set Required entities for all entities that dont have IDelegateParameterizedGenerator or IDelegateParameterizedModifier.
        /// Required entity is added for each foreign key entity in EntityFramework model.
        /// 3. Set InsertToPersistentStorageBeforeUse = true for all entities, that are present in EntityFramework model and has any property autogenerated in database;
        /// 4. Set default SetPrimaryKeysModifier, that will increment primary key value if 
        /// - Primary key is not configured to auto increment by database;
        /// - If primary key is of type long of int.
        /// Also set SetPrimaryKeysModifierValidator to validate that all primary keys manually incremented has supported type of long or int.
        /// 5. Set default EfCoreSetForeignKeysModifier, that will take foreign keys from Required entity instances and set to entity instance generated.
        /// Also set EfCoreSetForeignKeysModifierValidator to validate that all foreign key parent entities are present in Required entities list.
        /// 6. Add default EfCorePersistentStorage to store entity instances in SQL.
        /// And set default EfCoreRequestCapacityProvider, that will maximise number of instances inserted per single request.
        /// </summary>
        /// <returns></returns>
        public EntityFrameworkSetup SetupFullEfSettingsBundle()
        {
            return RegisterEntitiesFromEfDbContext()
                .SetRequiredFromEfDbContext()
                .SetInsertToPersistentStorageBeforeUseForAutoGeneratedPropertiesFromEfDbContext()
                .AddDefaultEfSetPrimaryKeysModifier()
                .AddDefaultEfSetForeignKeysModifier()
                .AddDefaultEfPersistentStorage();
        }

        /// <summary>
        /// Register all entities to GeneratorSetup from EntityFramework DbContext model.
        /// </summary>
        /// <returns></returns>
        public EntityFrameworkSetup RegisterEntitiesFromEfDbContext()
        {
            var modelService = new EfCoreModelService(_dbContextFactory);
            Type[] efTypes = modelService.GetConfiguredEntities();
            foreach (Type efType in efTypes)
            {
                if (!GeneratorSetup.ContainsEntity(efType))
                {
                    var entityDescription = new EntityDescription() { Type = efType };
                    GeneratorSetup = GeneratorSetup.RegisterEntity(entityDescription.ToGenericEntityDescription());
                }
            }

            return this;
        }

        /// <summary>
        /// Set InsertToPersistentStorageBeforeUse = true for all entities, that are present in EntityFramework model and has any property autogenerated in database;
        /// </summary>
        /// <returns></returns>
        public EntityFrameworkSetup SetInsertToPersistentStorageBeforeUseForAutoGeneratedPropertiesFromEfDbContext()
        {
            var modelService = new EfCoreModelService(_dbContextFactory);

            Type[] entityTypesRegistered = GeneratorSetup.GetRegistegedEntityTypes();
            foreach (Type entityType in entityTypesRegistered)
            {
                bool hasAutogeneratedProps = modelService.CheckHasAutoGeneratedProperties(entityType);
                if (hasAutogeneratedProps)
                {
                    GeneratorSetup = GeneratorSetup.EditEntity(entityType, config =>
                    {
                        config.InsertToPersistentStorageBeforeUse = true;
                        return config;
                    });
                }
            }
            return this;
        }

        /// <summary>
        /// Set Required entities for all entities that dont have IDelegateParameterizedGenerator or IDelegateParameterizedModifier.
        /// Required entity is added for each foreign key entity in EntityFramework model.
        /// </summary>
        /// <returns></returns>
        public EntityFrameworkSetup SetRequiredFromEfDbContext()
        {
            var modelService = new EfCoreModelService(_dbContextFactory);

            Type[] entityTypesRegistered = GeneratorSetup.GetRegistegedNotParameterizedEntityTypes();
            foreach (Type entityType in entityTypesRegistered)
            {
                RequiredEntity[] requiredEntity = modelService.GetParentEntities(entityType)
                    .Select(type => new RequiredEntity(type))
                    .ToArray();
                GeneratorSetup = GeneratorSetup.EditEntity(entityType, config =>
                {
                    config.Required.Clear();
                    config.Required.AddRange(requiredEntity);
                    return config;
                });
            }

            return this;
        }

        /// <summary>
        /// Set default SetPrimaryKeysModifier, that will increment primary key value if 
        /// 1. Primary key is not configured to auto increment by database;
        /// 2. If primary key is of type long of int.
        /// Also set SetPrimaryKeysModifierValidator to validate that all primary keys manually incremented has supported type of long or int.
        /// </summary>
        /// <param name="typesToExcludeValidation">Entities that won't be validated</param>
        /// <returns></returns>
        public EntityFrameworkSetup AddDefaultEfSetPrimaryKeysModifier(Type[] typesToExcludeValidation = null)
        {
            GeneratorSetup = GeneratorSetup
                .SetValidators(val => val
                    .EnsureAddValidator(new EfCoreSetPrimaryKeysModifierValidator(_dbContextFactory)
                        .ExcludeEntity(typesToExcludeValidation ?? new Type[0])
                    )
                )
                .SetDefaultSettings(def => def.AddModifier(new EfCoreSetPrimaryKeysModifier(_dbContextFactory)));

            return this;
        }

        /// <summary>
        /// Set default EfCoreSetForeignKeysModifier, that will take foreign keys from Required entity instances and set to entity instance generated.
        /// Also set EfCoreSetForeignKeysModifierValidator to validate that all foreign key parent entities are present in Required entities list.
        /// </summary>
        /// <param name="typesToExcludeValidation">Entities that won't be validated</param>
        /// <returns></returns>
        public EntityFrameworkSetup AddDefaultEfSetForeignKeysModifier(Type[] typesToExcludeValidation = null)
        {
            GeneratorSetup = GeneratorSetup
                .SetValidators(val => val.EnsureAddValidator(new EfCoreSetForeignKeysModifierValidator(_dbContextFactory)
                    .ExcludeEntity(typesToExcludeValidation ?? new Type[0])
                ))
                .SetDefaultSettings(def => def.AddModifier(new EfCoreSetForeignKeysModifier(_dbContextFactory)));

            return this;
        }

        /// <summary>
        /// Add default EfCorePersistentStorage to store entity instances in SQL.
        /// And set default EfCoreRequestCapacityProvider, that will maximise number of instances inserted per single request.
        /// </summary>
        /// <returns></returns>
        public EntityFrameworkSetup AddDefaultEfPersistentStorage()
        {
            var storage = new EfCorePersistentStorage(_dbContextFactory);
            GeneratorSetup = GeneratorSetup.SetDefaultSettings(def => def
               .AddPersistentStorage(storage)
               .SetRequestCapacityProvider(storage)
            );

            return this;
        }

    }
}
