using Microsoft.EntityFrameworkCore;
using Sanatana.DataGenerator.Storages;
using Sanatana.EntityFrameworkCore.Batch.ColumnMapping;
using Sanatana.EntityFrameworkCore.Batch.Commands.Merge;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;

namespace Sanatana.DataGenerator.EntityFrameworkCore
{
    
    public class EfCorePersistentStorage : 
        EfCoreRequestCapacityProvider, IPersistentStorage, IPersistentStorageSelector
    {
        //init
        public EfCorePersistentStorage(Func<DbContext> dbContextFactory)
            : base(dbContextFactory)
        {
        }

        public virtual void Setup()
        {
        }


        //IPersistentStorage methods
        public virtual async Task Insert<TEntity>(List<TEntity> entities)
            where TEntity : class
        {
            try
            {
                //will set ids generated by database on entities
                using (DbContext dbContext = _dbContextFactory())
                {
                    var merge = new MergeCommand<TEntity>(dbContext, entities);
                    merge.Output.SetExcludeAllByDefault(true)
                        .SetExcludeDbGeneratedByDefault(ExcludeOptions.Include);
                    int insertedCount = await merge.ExecuteAsync(MergeType.Insert)
                        .ConfigureAwait(false);
                }
            }
            catch (Exception ex)
            {
                throw;
            }
        }


        //IPersistentStorageSelector methods
        public virtual List<TEntity> Select<TEntity, TOrderByKey>(Expression<Func<TEntity, bool>> filter,
            Expression<Func<TEntity, TOrderByKey>> orderBy, bool isAscOrder, int skip, int take)
            where TEntity : class
        {
            using (DbContext dbContext = _dbContextFactory())
            {
                IQueryable<TEntity> query = dbContext.Set<TEntity>()
                    .Where(filter);

                if (orderBy != null)
                {
                    query = isAscOrder
                        ? query.OrderBy(orderBy)
                        : query.OrderByDescending(orderBy);
                }

                List<TEntity> entities = query
                    .Skip(skip)
                    .Take(take)
                    .ToList();
                return entities;
            }
        }

        public virtual long Count<TEntity>(Expression<Func<TEntity, bool>> filter)
            where TEntity : class
        {
            using (DbContext dbContext = _dbContextFactory())
            {
                long count = dbContext.Set<TEntity>()
                    .Where(filter)
                    .LongCount();
                return count;
            }
        }


        //IDisposable
        public virtual void Dispose()
        {
        }
    }
}
