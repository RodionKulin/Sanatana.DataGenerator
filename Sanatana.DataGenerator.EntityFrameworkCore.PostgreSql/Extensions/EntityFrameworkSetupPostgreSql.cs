using Microsoft.EntityFrameworkCore;
using Sanatana.DataGenerator.Entities;
using Sanatana.DataGenerator.EntityFrameworkCore;
using Sanatana.DataGenerator.EntityFrameworkCore.Internals;
using Sanatana.DataGenerator.EntityFrameworkCore.Modifiers;
using Sanatana.DataGenerator.EntityFrameworkCore.Validators;
using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Sanatana.EntityFrameworkCore.Batch.PostgreSql;
using Sanatana.EntityFrameworkCore.Batch.PostgreSql.Repositories;
using Sanatana.EntityFrameworkCore.Batch.Repositories;

namespace Sanatana.DataGenerator.EntityFrameworkCore.Extensions
{

    public class EntityFrameworkSetupPostgreSql
    {
        //fields
        protected Func<DbContext> _dbContextFactory;
        protected EfCoreDataGeneratorSetupService _entityFrameworkSetup;

        //properties
        public GeneratorSetup GeneratorSetup { get; set; }


        //init
        public EntityFrameworkSetupPostgreSql(GeneratorSetup generatorSetup, Func<DbContext> dbContextFactory)
        {
            GeneratorSetup = generatorSetup;
            _dbContextFactory = dbContextFactory;
            _entityFrameworkSetup = new EfCoreDataGeneratorSetupService(dbContextFactory);
        }



        /// <summary>
        /// Setup all settings related to EntityFramework including:
        /// 1. Register all entities to GeneratorSetup from EntityFramework DbContext model;
        /// 2. Set Required entities for all entities that dont have IDelegateParameterizedGenerator or IDelegateParameterizedModifier.
        /// Required entity is added for each foreign key entity in EntityFramework model.
        /// 3. Set InsertToPersistentStorageBeforeUse = true for all entities, that are present in EntityFramework model and has any property autogenerated in database;
        /// 4. Set default SetPrimaryKeysModifier, that will increment primary key value if 
        /// - Primary key is not configured to auto increment by database;
        /// - If primary key is of type long of int.
        /// Also set SetPrimaryKeysModifierValidator to validate that all primary keys manually incremented has supported type of long or int.
        /// 5. Set default EfCoreSetForeignKeysModifier, that will take foreign keys from Required entity instances and set to entity instance generated.
        /// Also set EfCoreSetForeignKeysModifierValidator to validate that all foreign key parent entities are present in Required entities list.
        /// 6. Add default EfCorePersistentStorage to store entity instances in SQL.
        /// And set default EfCoreRequestCapacityProvider, that will maximise number of instances inserted per single request.
        /// </summary>
        /// <returns></returns>
        public virtual EntityFrameworkSetupPostgreSql SetupFullEfSettingsBundle()
        {
            return RegisterEntitiesFromEfDbContext()
                .SetRequiredFromEfDbContext()
                .SetInsertToPersistentStorageBeforeUseForAutoGeneratedPropertiesFromEfDbContext()
                .AddDefaultEfSetPrimaryKeysModifier()
                .AddDefaultEfSetForeignKeysModifier()
                .AddDefaultEfPersistentStorage();
        }

        /// <summary>
        /// Register all entities to GeneratorSetup from EntityFramework DbContext model.
        /// </summary>
        /// <returns></returns>
        public virtual EntityFrameworkSetupPostgreSql RegisterEntitiesFromEfDbContext()
        {
            GeneratorSetup = _entityFrameworkSetup.RegisterEntitiesFromEfDbContext(GeneratorSetup);
            return this;
        }

        /// <summary>
        /// Set InsertToPersistentStorageBeforeUse = true for all entities, that are present in EntityFramework model and has any property autogenerated in database;
        /// </summary>
        /// <returns></returns>
        public virtual EntityFrameworkSetupPostgreSql SetInsertToPersistentStorageBeforeUseForAutoGeneratedPropertiesFromEfDbContext()
        {
            GeneratorSetup = _entityFrameworkSetup.SetInsertToPersistentStorageBeforeUseForAutoGeneratedPropertiesFromEfDbContext(GeneratorSetup);
            return this;
        }

        /// <summary>
        /// Set Required entities for all entities that dont have IDelegateParameterizedGenerator or IDelegateParameterizedModifier.
        /// Required entity is added for each foreign key entity in EntityFramework model.
        /// </summary>
        /// <returns></returns>
        public virtual EntityFrameworkSetupPostgreSql SetRequiredFromEfDbContext()
        {
            GeneratorSetup = _entityFrameworkSetup.SetRequiredFromEfDbContext(GeneratorSetup);
            return this;
        }

        /// <summary>
        /// Set default SetPrimaryKeysModifier, that will increment primary key value if 
        /// 1. Primary key is not configured to auto increment by database;
        /// 2. If primary key is of type long of int.
        /// Also set SetPrimaryKeysModifierValidator to validate that all primary keys manually incremented has supported type of long or int.
        /// </summary>
        /// <param name="typesToExcludeValidation">Entities that won't be validated</param>
        /// <returns></returns>
        public virtual EntityFrameworkSetupPostgreSql AddDefaultEfSetPrimaryKeysModifier(Type[] typesToExcludeValidation = null)
        {
            GeneratorSetup = _entityFrameworkSetup.AddDefaultEfSetPrimaryKeysModifier(GeneratorSetup, typesToExcludeValidation);
            return this;
        }

        /// <summary>
        /// Set default EfCoreSetForeignKeysModifier, that will take foreign keys from Required entity instances and set to entity instance generated.
        /// Also set EfCoreSetForeignKeysModifierValidator to validate that all foreign key parent entities are present in Required entities list.
        /// </summary>
        /// <param name="typesToExcludeValidation">Entities that won't be validated</param>
        /// <returns></returns>
        public virtual EntityFrameworkSetupPostgreSql AddDefaultEfSetForeignKeysModifier(Type[] typesToExcludeValidation = null)
        {
            GeneratorSetup = _entityFrameworkSetup.AddDefaultEfSetForeignKeysModifier(GeneratorSetup, typesToExcludeValidation);
            return this;
        }

        /// <summary>
        /// Add default EfCorePersistentStorage to store entity instances in SQL.
        /// And set default EfCoreRequestCapacityProvider, that will maximise number of instances inserted per single request.
        /// </summary>
        /// <returns></returns>
        public virtual EntityFrameworkSetupPostgreSql AddDefaultEfPersistentStorage()
        {
            IRepositoryFactory repositoryFactory = new PostgreRepositoryFactory(_dbContextFactory);
            GeneratorSetup = _entityFrameworkSetup.AddDefaultEfPersistentStorage(GeneratorSetup, repositoryFactory);
            return this;
        }

    }
}
