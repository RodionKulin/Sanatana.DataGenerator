using Sanatana.DataGenerator.Entities;
using Sanatana.DataGenerator.Internals.EntitySettings;
using Sanatana.DataGenerator.Internals.Validators.Contracts;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Sanatana.DataGenerator.Internals.Validators.BeforeSetup
{
    public class InsertToPersistentStorageBeforeUseSetupValidator : IBeforeSetupValidator
    {
        public void ValidateSetup(GeneratorServices generatorServices)
        {
            
            string[] inconsistentEntities = generatorServices.EntityDescriptions.Values
                .Where(x => x.InsertToPersistentStorageBeforeUse)
                .Where(x => generatorServices.Defaults.GetPersistentStorages(x).Count > 1)
                .Select(x => x.Type.FullName)
                .ToArray();

            if(inconsistentEntities.Length > 0)
            {
                string msg = $"Types {string.Join(", ", inconsistentEntities)} have {nameof(EntityDescription.InsertToPersistentStorageBeforeUse)}=true and multiple {nameof(EntityDescription.PersistentStorages)} configured. " +
                    $"Second storage can replace Ids generated by first storage and lead to unexpected result. " +
                    $"If you want to allow such setup, then remove {nameof(InsertToPersistentStorageBeforeUseSetupValidator)} from {nameof(generatorServices.Validators)}";
                throw new NotSupportedException(msg);
            }

        }
    }
}
