using Sanatana.DataGenerator.Internals;
using Sanatana.DataGenerator.Storages;
using Sanatana.EntityFramework.Batch.Commands;
using Sanatana.EntityFramework.Batch.Commands.Merge;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Sanatana.EntityFramework.Batch;
using Sanatana.EntityFramework.Batch.ColumnMapping;

namespace Sanatana.DataGenerator.EntityFramework
{
    public class EntityFrameworkPersistentStorage : EntityFrameworkFlushTrigger, IPersistentStorage
    {
        //init
        public EntityFrameworkPersistentStorage(DbContext db)
            : base(db)
        {
        }


        //methods
        public virtual async Task Insert<TEntity>(List<TEntity> entities)
            where TEntity : class
        {
            //Will set ids generated by database on entities
            var repo = new Repository(_db);
            MergeCommand<TEntity> merge = repo.Merge(entities);
            merge.Output.SetExcludeAllByDefault(true)
                .SetExcludeDbGeneratedByDefault(ExcludeOptions.Include);
            int insertedCount = await merge.ExecuteAsync(MergeType.Insert)
                .ConfigureAwait(false);
        }

        public virtual void Dispose()
        {
        }
    }
}
